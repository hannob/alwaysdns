#!/usr/bin/python3
# SPDX-License-Identifier: 0BSD

import argparse
import base64
import ipaddress
import pathlib
import re
import socket

import dns.resolver
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa


def errormsg(msg):
    print(f"ERROR: {msg}")


def warnmsg(msg):
    print(f"WARNING: {msg}")


def infomsg(msg):
    if not args.quiet:
        print(f"INFO: {msg}")


def debugmsg(msg):
    if args.debug:
        print(f"DEBUG: {msg}")


def check_srv(host):
    infomsg("Checking SRV record")
    for prot in ["submission", "pop3", "imap"]:  # , "xmpp-client", "xmpp-server" ]:
        try:
            plain = dns.resolver.resolve(f"_{prot}._tcp.{host}", "SRV")
            debugmsg(plain.rrset)
            plainpriority = plain.rrset[0].priority
        except (dns.resolver.NXDOMAIN, dns.resolver.NoAnswer):
            plain = False
        try:
            secure = dns.resolver.resolve(f"_{prot}s._tcp.{host}", "SRV")
            debugmsg(secure.rrset)
            securepriority = secure.rrset[0].priority
        except (dns.resolver.NXDOMAIN, dns.resolver.NoAnswer):
            secure = False

        if plain and not secure:
            errormsg(f"{host} SRV record for {prot} (plaintext), but not for {prot}s (TLS)")

        if plain and secure:
            # Note: Lower value means higher priority
            if plainpriority < securepriority:
                errormsg(
                    f"{host} SRV record for secure {prot} with lower priority than plaintext"
                )
            if plainpriority == securepriority:
                errormsg(
                    f"{host} SRV record for secure {prot} with same priority as plaintext"
                )


def check_dmarc(host):
    infomsg("Checking DMARC record")
    try:
        ret = dns.resolver.resolve(f"_dmarc.{host}", "TXT")
    except (dns.resolver.NXDOMAIN, dns.resolver.NoAnswer):
        infomsg("No DMARC")
        return

    if len(ret) > 1:
        errormsg("DMARC: More than one record")

    dmarc = ret[0].strings[0].decode()
    if not dmarc.startswith("v=DMARC1"):
        errormsg("DMARC: record with invalid content")

    dmarcdata = {}
    for f in dmarc.split(";"):
        if f.strip() == "":
            continue
        fs = f.split("=", 2)
        if len(fs) != 2:
            errormsg("DMARC: Error parsing key/value pairs")
            continue
        if fs[0] in dmarcdata:
            errormsg("DMARC: duplicate value")
            continue
        dmarcdata[fs[0].strip()] = fs[1].strip()

    for rep in ["ruf", "rua"]:
        if rep in dmarcdata:
            for uri in dmarcdata[rep].split(","):
                if uri.startswith("mailto:"):
                    email = uri.split(":", 2)[1]
                    m = email.split("@", 2)
                    if len(m) != 2:
                        errormsg("DMARC: Cannot parse reporting mail address")
                        continue
                    repdom = m[1]
                    if host == repdom:
                        # host and reporting mail domain match,
                        # no need for reporting record
                        continue

                    try:
                        reprec = f"{host}._report._dmarc.{repdom}"
                        ret = dns.resolver.resolve(reprec, "TXT")
                    except (dns.resolver.NXDOMAIN, dns.resolver.NoAnswer):
                        errormsg(f"DMARC: {rep} email error, {reprec} does not exist")
                        continue
                    if len(ret) > 1:
                        errormsg(f"DMARC: Multiple reporting records at {reprec}")
                    repstr = ret[0].strings[0].decode()
                    if not repstr.startswith("v=DMARC1"):
                        errormsg(f"DMARC: {rep} email error, {reprec} invalid")


def check_spf(host):
    infomsg("Checking SPF records")
    ret = dns.resolver.resolve(host, "SPF", raise_on_no_answer=False)
    if ret.rrset is not None:
        errormsg("Host has deprecated SPF record (RFC 7208 3.1).")


def check_mx(host):
    infomsg("Checking for MX records with IP addresses...")
    try:
        ret = dns.resolver.resolve(host, "MX")
    except dns.resolver.NoAnswer:
        infomsg("No MX")
        return
    for mx in ret:
        mxc = str(mx.exchange).rstrip(".")
        try:
            ip = ipaddress.ip_address(mxc)
            errormsg(f"IP {ip} in MX record")
        except ValueError:
            debugmsg(f"MX record {mxc} is no IP (good)")


def check_soa(host):
    infomsg("Getting name servers...")
    try:
        ret = dns.resolver.resolve(host, "NS")
    except dns.resolver.NoAnswer:
        # FIXME: maybe check upper records instead
        infomsg("No direct NS records")
        return
    nameservers = []
    for ns in ret.rrset:
        nameservers.append(str(ns))
    debugmsg(f"Nameservers: {','.join(nameservers)}")

    infomsg("Checking SOA record consistency")
    soa = []
    for ns in nameservers:
        # this is ipv4 only for now
        ip = socket.gethostbyname(ns)
        debugmsg(f"Nameserver {ns} IP: {ip}")

        nsr = dns.resolver.Resolver()
        nsr.nameservers = [ip]

        ret = nsr.resolve(host, "SOA")
        soa.append(str(ret.rrset))

    if len(set(soa)) != 1:
        errormsg("SOA records are not consistent across nameservers")


def check_dkim_string(dkimrecord):
    if '"' in dkimrecord:
        dsplit = dkimrecord.split('"')
        rec = ""
        for i, s in enumerate(dsplit):
            if i % 2 == 1:
                rec += s
    else:
        rec = dkimrecord

    rdat = {}
    for val in rec.split(";"):
        if val.strip() == "":
            continue
        if "=" not in val:
            errormsg(f"DKIM: no key value pair {val!r}")
            return
        k, v = val.split("=", 1)
        rdat[k.strip()] = v.strip()

    if "p" not in rdat:
        errormsg('DKIM: no public key ("p=") found')
        return

    if "k" not in rdat or rdat["k"] == "rsa":
        kty = "rsa"
    elif rdat["k"] == "ed25519":
        kty = "ed25519"
    else:
        errormsg(f"DKIM: unknown key type {rdat['k']}")
        return

    if " " in rdat["p"]:
        warnmsg("DKIM: unnecessary space in key")
        rdat["p"] = rdat["p"].replace(" ", "")
    if rdat["p"] != re.sub(r"[^0-9a-zA-Z+/=]", "", rdat["p"]):
        errormsg("DKIM: invalid base64 chars")
        rdat["p"] = re.sub(r"[^0-9a-zA-Z+/=]", "", rdat["p"])

    try:
        raw = base64.b64decode(rdat["p"])
    except ValueError:
        errormsg("DKIM: cannot decode base64")
        return

    if kty == "rsa":
        try:
            key = serialization.load_der_public_key(raw)
        except ValueError:
            try:
                key = serialization.load_der_private_key(raw, None)
                errormsg("DKIM: private key instead of public key")
            except ValueError:
                errormsg("DKIM: cannot decode public key")
                return

        if not isinstance(key, rsa.RSAPublicKey):
            errormsg(f"DKIM: RSA key expected, got {type(key).__name__}")
            return
        pemspki = key.public_bytes(serialization.Encoding.PEM,
                                   serialization.PublicFormat.SubjectPublicKeyInfo)
        pempkcs1 = key.public_bytes(serialization.Encoding.PEM,
                                    serialization.PublicFormat.PKCS1)
        pemspki = "".join(pemspki.decode().split("\n")[1:-2])
        pempkcs1 = "".join(pempkcs1.decode().split("\n")[1:-2])
        if rdat["p"] == pemspki:
            # unfortunately, the DKIM RFC 6376 is inconsistent whether
            # SPKI or PKCS1 should be used, but in practice,
            # everyone uses SPKI.
            infomsg(f"DKIM: Found valid RSA key ({key.key_size} bit)")
        elif rdat["p"] == pempkcs1:
            errormsg("DKIM: Key in PKCS1 format")
        else:
            errormsg("DKIM: Reencoded RSA key mismatch")
    elif kty == "ed25519":
        if len(raw) != 32:
            errormsg(f"DKIM: Ed25519 key with wrong length ({len(raw)} instead of 32)")
        else:
            infomsg("DKIM: Found valid Ed25519 key")


def check_dkim(dkimhost):
    infomsg(f"DKIM Checking key record {dkimhost}")
    try:
        r = dns.resolver.resolve(dkimhost, "TXT")
    except dns.resolver.NoAnswer:
        infomsg(f"No DKIM record at {dkimhost}")
        return
    dkimrec = ""
    for s in r[0].strings:
        dkimrec += s.decode()
    check_dkim_string(dkimrec)


ap = argparse.ArgumentParser()
ap.add_argument("domain", nargs="+", help="Domain names to scan")
ap.add_argument("-q", "--quiet", action="store_true", help="Output only ERROR messages")
ap.add_argument("-d", "--debug", action="store_true", help="Output DEBUG messages")
ap.add_argument("-t", "--tests", help="Comma-separated list of tests to run")
ap.add_argument("--dkimsel", help="DKIM selector")
ap.add_argument("--dkim", action="store_true", help="Pass only DKIM TXT record host")
ap.add_argument("--dkimfile", action="store_true", help="Check DKIM key record in file")

args = ap.parse_args()

tests = [check_soa, check_spf, check_dmarc, check_srv, check_mx]

if args.tests:
    tests = []
    for t in args.tests.split(","):
        tests.append(locals()["check_" + t])

for domain in args.domain:
    if args.dkim:
        check_dkim(domain)
        continue
    if args.dkimfile:
        dkimtxt = pathlib.Path(domain).read_text()
        check_dkim_string(dkimtxt)
        continue

    for test in tests:
        test(domain)
    if args.dkimsel:
        check_dkim(f"{args.dkimsel}._domainkey.{domain}")
